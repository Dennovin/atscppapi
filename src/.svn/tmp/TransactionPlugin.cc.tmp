/*
 * TransactionPlugin.cc
 *
 *  Created on: Mar 11, 2013
 *      Author: mnilange
 */

#include "atscppapi/TransactionPlugin.h"
#include <ts/ts.h>
#include <cstddef>
#include <cassert>
#include "atscppapi/Mutex.h"
#include "atscppapi/shared_ptr.h"
#include "utils_internal.h"
#include "atscppapi/noncopyable.h"
#include "logging_internal.h"

using namespace atscppapi;
using atscppapi::TransactionPlugin;

/**
 * \private
 */
struct atscppapi::TransactionPluginState: noncopyable {
  TSCont cont_;
  Transaction &transaction_;
  shared_ptr<Mutex> mutex_;
  TransactionPluginState(atscppapi::Transaction &transaction) : transaction_(transaction), mutex_(new Mutex(Mutex::TYPE_RECURSIVE)) {
  };
};

namespace {

static int handleTransactionPluginEvents(TSCont cont, TSEvent event, void *edata) {
  TSHttpTxn txn = static_cast<TSHttpTxn>(edata);
  TransactionPlugin *plugin = static_cast<TransactionPlugin *>(TSContDataGet(cont));
  LOG_DEBUG("cont=%p, event=%d, tshttptxn=%p, plugin=%p", cont, event, edata, plugin);
  atscppapi::utils::internal::invokePluginForEvent(plugin, txn, event);
  return 0;
}

} /* anonymous namespace */

TransactionPlugin::TransactionPlugin(Transaction &transaction) {
  state_ = new TransactionPluginState(transaction);
  TSMutex mutex = NULL;
  state_->cont_ = TSContCreate(handleTransactionPluginEvents, mutex);
  TSContDataSet(state_->cont_, static_cast<void *>(this));
  LOG_DEBUG("Creating new TransactionPlugin=%p tshttptxn=%p, cont=%p", this, transaction.getAtsHandle(), state_->cont_);
  state_->transaction_.addPlugin(this);
}

shared_ptr<Mutex> TransactionPlugin::getMutex() {
  return state_->mutex_;
}

TransactionPlugin::~TransactionPlugin() {
  LOG_DEBUG("Destroying TransactionPlugin=%p", this);
  TSContDestroy(state_->cont_);
  delete state_;
}

void TransactionPlugin::registerHook(HookType hook_type) {
  LOG_DEBUG("TransactionPlugin=%p tshttptxn=%p registering hook_type=%d [%s]", this, state_->transaction_.getAtsHandle(), hook_type, HOOK_TYPE_STRINGS[hook_type].c_str());
  TSHttpHookID hook_id = atscppapi::utils::internal::convertInternalHookToTsHook(hook_type);
  TSHttpTxnHookAdd(static_cast<TSHttpTxn>(state_->transaction_.getAtsHandle()), hook_id, state_->cont_);
}
