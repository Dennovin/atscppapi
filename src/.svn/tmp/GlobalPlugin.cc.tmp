/*
 * GlobalPlugin.cc
 *
 *  Created on: Mar 5, 2013
 *      Author: bgeffon
 */
#include "atscppapi/GlobalPlugin.h"
#include <ts/ts.h>
#include <cstddef>
#include <cassert>
#include "atscppapi/noncopyable.h"
#include "utils_internal.h"
#include "logging_internal.h"

using atscppapi::GlobalPlugin;

/**
 * \private
 */
struct atscppapi::GlobalPluginState: noncopyable {
  TSCont cont_;
};

namespace {

static int handleGlobalPluginEvents(TSCont cont, TSEvent event, void *edata) {
  TSHttpTxn txn = static_cast<TSHttpTxn>(edata);
  GlobalPlugin *global_plugin = static_cast<GlobalPlugin *>(TSContDataGet(cont));
  LOG_DEBUG("Invoking global plugin %p for event %d on transaction %p", global_plugin, event, txn);
  atscppapi::utils::internal::invokePluginForEvent(global_plugin, txn, event);
  return 0;
}

} /* anonymous namespace */

GlobalPlugin::GlobalPlugin() {
  utils::internal::initTransactionManagement();
  state_ = new GlobalPluginState();
  TSMutex mutex = NULL;
  state_->cont_ = TSContCreate(handleGlobalPluginEvents, mutex);
  TSContDataSet(state_->cont_, static_cast<void *>(this));
}

GlobalPlugin::~GlobalPlugin() {
  TSContDestroy(state_->cont_);
  delete state_;
}

void GlobalPlugin::registerHook(HookType hook_type) {
  TSHttpHookID hook_id = atscppapi::utils::internal::convertInternalHookToTsHook(hook_type);
  TSHttpHookAdd(hook_id, state_->cont_);
  LOG_DEBUG("Registered global plugin %p for hook %s", this, HOOK_TYPE_STRINGS[hook_type].c_str());
}
