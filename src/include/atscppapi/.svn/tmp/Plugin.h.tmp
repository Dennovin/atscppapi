/**
 * @file Plugin.h
 * @author Brian Geffon
 * @author Manjesh Nilange
 *
 * \brief Contains the base interface used in creating Global and Transaciton plugins.
 * \note This interface can never be implemented directly, it should be implemented
 *   through extending GlobalPlugin, TransactionPlugin, or TransformationPlugin.
 */

#pragma once
#ifndef ATSCPPAPI_PLUGIN_H_
#define ATSCPPAPI_PLUGIN_H_

#include <atscppapi/HookType.h>
#include <atscppapi/Transaction.h>
#include <atscppapi/noncopyable.h>

namespace atscppapi {

/**
 * \brief The base interface used when creating a Plugin.
 *
 * \note This interface can never be implemented directly, it should be implemented
 *   through extending GlobalPlugin, TransactionPlugin, or TransformationPlugin.
 *
 * @see TransactionPlugin
 * @see GlobalPlugin
 * @see TransformationPlugin
 */
class Plugin: noncopyable {
public:
  /**
   * This method must be implemented when you hook HOOK_READ_REQUEST_HEADERS_PRE_REMAP
   */
  virtual void handleReadRequestHeadersPreRemap(Transaction &transaction) { transaction.resume(); };

  /**
   * This method must be implemented when you hook HOOK_READ_REQUEST_HEADERS_POST_REMAP
   */
  virtual void handleReadRequestHeadersPostRemap(Transaction &transaction) { transaction.resume(); };

  /**
   * This method must be implemented when you hook HOOK_SEND_REQUEST_HEADERS
   */
  virtual void handleSendRequestHeaders(Transaction &transaction) { transaction.resume(); };

  /**
   * This method must be implemented when you hook HOOK_READ_RESPONSE_HEADERS
   */
  virtual void handleReadResponseHeaders(Transaction &transaction) { transaction.resume(); };

  /**
   * This method must be implemented when you hook HOOK_SEND_RESPONSE_HEADERS
   */
  virtual void handleSendResponseHeaders(Transaction &transaction) { transaction.resume(); };

  /**
   * This method must be implemented when you hook HOOK_OS_DNS
   */
  virtual void handleOsDns(Transaction &transaction) { transaction.resume(); };

  virtual ~Plugin() { };
protected:
  /**
  * \note This interface can never be implemented directly, it should be implemented
  *   through extending GlobalPlugin, TransactionPlugin, or TransformationPlugin.
  *
  * \private
  */
  Plugin() { };
};

} /* atscppapi */

#endif /* ATSCPPAPI_GLOBALPLUGIN_H_ */
